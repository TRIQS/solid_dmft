FROM ubuntu:22.04 AS base
ARG LLVM=15

# This platform includes dependencies for building docs
RUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
      build-essential \
      clang-${LLVM} \
      cmake \
      cython3 \
      debhelper \
      dh-python \
      g++ \
      gfortran \
      hdf5-tools \
      jupyter-notebook \
      libboost-dev \
      libc++-${LLVM}-dev \
      libc++abi-${LLVM}-dev \
      libclang-${LLVM}-dev \
      libevent-dev \
      libfabric-dev \
      libfftw3-dev \
      libgfortran5 \
      libgmp-dev \
      libhdf5-dev \
      libhwloc-dev \
      libmkl-dev \
      libnfft3-dev \
      libomp-${LLVM}-dev \
      libopenblas-dev \
      libopenmpi-dev \
      libpmi2-0-dev \
      libpython3-dev \
      llvm-${LLVM}-dev \
      openmpi-bin \
      openmpi-common \
      openmpi-doc \
      pandoc \
      python-is-python3 \
      python3-ase \
      python3-clang-${LLVM} \
      python3-decorator \
      python3-dev \
      python3-jinja2 \
      python3-mako \
      python3-matplotlib \
      python3-monty \
      python3-mpi4py \
      python3-myst-parser \
      python3-nbsphinx \
      python3-notebook \
      python3-numpy \
      python3-pandas \
      python3-pip \
      python3-pymatgen \
      python3-pytest \
      python3-scipy \
      python3-shapely \
      python3-skimage \
      python3-sphinx \
      python3-sphinx-rtd-theme \
      wget \
      && \
      apt-get autoremove --purge -y && \
      apt-get autoclean -y && \
      rm -rf /var/cache/apt/* /var/lib/apt/lists/*

RUN mkdir -p /src && cd /src \
 && wget http://archive.ubuntu.com/ubuntu/pool/universe/u/uc-micro-py/uc-micro-py_1.0.1{-3.dsc,.orig.tar.xz,-3.debian.tar.xz} \
 && dpkg-source -x uc-micro-py_1.0.1-3.dsc \
 && cd uc-micro-py-1.0.1 \
 && DEB_BUILD_OPTIONS=nocheck dpkg-buildpackage -b -d -uc -us \
 && cd - \
 && apt-get install ./python3-uc-micro_1.0.1-3_all.deb \
 && wget http://archive.ubuntu.com/ubuntu/pool/universe/l/linkify-it-py/linkify-it-py_2.0.0{-1.dsc,.orig.tar.gz,-1.debian.tar.xz} \
 && dpkg-source -x linkify-it-py_2.0.0-1.dsc \
 && cd linkify-it-py-2.0.0/ \
 && DEB_BUILD_OPTIONS=nocheck dpkg-buildpackage -b -d -uc -us \
 && cd - \
 && apt-get install ./python3-linkify-it_2.0.0-1_all.deb \
 && cd / && rm -rf /src

# install openmpi and compile openmpi manually
# this is to ensure PMI compatibility with cray systems
# RUN wget -q https://download.open-mpi.org/release/open-mpi/v4.1/openmpi-4.1.5.tar.gz \
#     && tar xf openmpi-4.1.5.tar.gz \
#     && cd openmpi-4.1.5 \
#     && ./configure --prefix=/usr --enable-mpi-cxx --with-libfabric=/usr \
#         --with-hwloc=/usr --with-hwloc-libdir=/usr/lib/x86_64-linux-gnu \
#         --with-libevent=/usr --with-libevent-libdir=/usr/lib/x86_64-linux-gnu \
#         --with-pmi=/usr/include/slurm --with-pmi-libdir=/usr/lib/x86_64-linux-gnu \
#         CFLAGS="-I/usr/include/slurm" \
#     && make -j$(nproc) \
#     && make install \
#     && ldconfig \
#     && cd .. \
#     && rm -rf openmpi-4.1.5.tar.gz openmpi-4.1.5

ENV PYTHON_VERSION=3.10 \
    CC=clang-${LLVM} CXX=clang++-${LLVM} CXXFLAGS="-stdlib=libc++"
RUN update-alternatives --install /usr/bin/clang clang /usr/bin/clang-${LLVM} 60 --slave /usr/bin/clang++ clang++ /usr/bin/clang++-${LLVM} --slave /usr/bin/clang-cpp clang-cpp /usr/bin/clang-cpp-${LLVM}

ENV OMP_NUM_THREADS=1
ENV MKL_NUM_THREADS=1
ENV MKL_INTERFACE_LAYER=GNU,LP64
ENV MKL_THREADING_LAYER=SEQUENTIAL
ENV OMPI_ALLOW_RUN_AS_ROOT=1
ENV OMPI_ALLOW_RUN_AS_ROOT_CONFIRM=1
ENV OMPI_MCA_rmaps_base_oversubscribe="yes"
ENV OMPI_MCA_btl_vader_single_copy_mechanism=none
ARG NCORES=20

# create source dirs
RUN cd / && mkdir -p triqs && mkdir -p source

# W90
RUN cd /source && wget -q -O wannier90.tar.gz https://github.com/wannier-developers/wannier90/archive/d141f9f.tar.gz \
    && tar xf wannier90.tar.gz --xform='s/-d141f9f84dcd3ac54729b9e5874dabd451684237//g' && cd wannier90 \
    # Using gfortran compiler
    && echo "F90 = mpif90 \n COMMS  = mpi \n MPIF90 = mpif90 \n FCOPTS = -O3 -fallow-argument-mismatch \n LIBS = -Wl,--no-as-needed -lmkl_gf_lp64 -lmkl_sequential -lmkl_core -lpthread -lm -ldl \n" > make.inc \
    && cd /source/wannier90 \
    && make PREFIX=/triqs wannier lib post w90chk2chk \
    && make PREFIX=/triqs install \
    && mkdir /triqs/include \
    && cp src/obj/* /triqs/include/

# install qe
RUN cd /source && wget --quiet https://gitlab.com/QEF/q-e/-/archive/qe-7.2/q-e-qe-7.2.tar.gz \
   && tar -xf q-e-qe-7.2.tar.gz \
   && cd q-e-qe-7.2 \
   && mkdir -p build && cd build \
   && cmake -D CMAKE_C_COMPILER=mpicc -D CMAKE_Fortran_COMPILER=mpif90 \
        -D CMAKE_VERBOSE_MAKEFILE=ON \
        -D BLA_VENDOR=Intel10_64lp_seq \
        -D QE_ENABLE_HDF5=ON \
        -D QE_FFTW_VENDOR=FFTW3 \
        -D QE_ENABLE_SCALAPACK=OFF \
        -D QE_ENABLE_OPENMP=ON \
        -D QE_WANNIER90_INTERNAL=OFF \
        -D WANNIER90_ROOT=/triqs \
        ../ \
    && make -j$NCORES all \
    && make install

# VASP for CSC calculations
#ADD csc_vasp.tar.gz /vasp/
#COPY openmpi_vasp.makefile /vasp/makefile.include

# patch for Vasp CSC
#COPY vasp_diffs /vasp/vasp_diffs
#RUN cd /vasp/src \
    #&& for name in electron.F fileio.F locproj.F mlwf.F .objects; \
       #do patch $name -p1 -i ../vasp_diffs/$name; done

#RUN  cd /vasp/ \
     #&& make std \
     #&& rm -rf src/ build/ arch/

#ENV PATH=/vasp/bin:${PATH}

# the above is cached by the github action workflow
FROM base AS pkgs

# triqs
ENV CPATH=/triqs/include:/usr/include/mkl:${CPATH} \
    PATH=/triqs/bin:${PATH} \
    LIBRARY_PATH=/triqs/lib:${LIBRARY_PATH} \
    LD_LIBRARY_PATH=/triqs/lib:${LD_LIBRARY_PATH} \
    PYTHONPATH=/triqs/lib/python3.10/site-packages:${PYTHONPATH} \
    CMAKE_PREFIX_PATH=/triqs/share/cmake:${CMAKE_PREFIX_PATH} \
    CMAKE_BUILD_PARALLEL_LEVEL=${NCORES} \
    CTEST_OUTPUT_ON_FAILURE=1 \
    CTEST_PARALLEL_LEVEL=${NCORES} \
    BLA_VENDOR=Intel10_64_dyn \
    TRIQS_ROOT=/triqs

RUN cd /source && git clone -b unstable --depth 1 https://github.com/TRIQS/triqs triqs.src \
    && mkdir -p triqs.build && cd triqs.build \
    && cmake ../triqs.src -DCMAKE_INSTALL_PREFIX=/triqs \
    && make -j$NCORES && ctest -j$NCORES && make install

# dft_tools
RUN cd /source && git clone -b unstable --depth 1 https://github.com/TRIQS/dft_tools.git dft_tools.src \
    && mkdir -p dft_tools.build && cd dft_tools.build \
    && cmake ../dft_tools.src \
    && make -j$NCORES && ctest -j$NCORES && make install

# cthyb
RUN cd /source && git clone -b unstable --depth 1 https://github.com/TRIQS/cthyb.git cthyb.src \
    && mkdir -p cthyb.build && cd cthyb.build \
    && cmake ../cthyb.src \
    && make -j$NCORES && ctest -j$NCORES && make install

# maxent
RUN cd /source && git clone -b unstable --depth 1 https://github.com/TRIQS/maxent.git maxent.src \
    && mkdir -p maxent.build && cd maxent.build \
    && cmake ../maxent.src \
    && make -j$NCORES && ctest -j$NCORES && make install

# TPRF
RUN cd /source && git clone -b unstable --depth 1 https://github.com/TRIQS/tprf.git tprf.src \
    && mkdir -p tprf.build && cd tprf.build \
    && cmake ../tprf.src  \
    && make -j$NCORES && make test && make install

# hubbardI
RUN cd /source && git clone -b unstable --depth 1 https://github.com/TRIQS/hubbardI.git hubbardI.src \
    && mkdir -p hubbardI.build && cd hubbardI.build \
    && cmake ../hubbardI.src \
    && make -j$NCORES && ctest -j$NCORES && make install

# hartree_fock
RUN cd /source && git clone -b unstable --depth 1 https://github.com/TRIQS/hartree_fock.git hartree_fock.src \
    && mkdir -p hartree_fock.build && cd hartree_fock.build \
    && cmake ../hartree_fock.src \
    && make -j$NCORES && ctest -j$NCORES && make install

# download solid_dmft and install
RUN cd /source && git clone -b unstable --depth 1 https://github.com/flatironinstitute/solid_dmft.git solid_dmft.src \
    && mkdir -p solid_dmft.build && cd solid_dmft.build \
    && cmake ../solid_dmft.src \
    && make test && make install

# remove source
RUN cd / && rm -rf source

# create a useful work dir
RUN cd / && mkdir work && cd work

# expose port for jupyter
EXPOSE 8378

COPY entrypoint.sh /usr/local/bin/entrypoint.sh
COPY jupyter_start.sh /usr/local/bin/jupyter.sh

RUN ["chmod", "+x", "/usr/local/bin/entrypoint.sh"]
RUN ["chmod", "+x", "/usr/local/bin/jupyter.sh"]

# change user and group id to match host machine if options are passed accordingly
ENTRYPOINT ["/usr/local/bin/entrypoint.sh"]

