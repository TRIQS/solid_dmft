FROM ubuntu:22.04 AS base
ARG LLVM=15

##################################################
# Essential packages and libraries               #
##################################################

# get essential packages
RUN apt-get update && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
# Generally needed
    libmkl-full-dev \
    sudo \
    libmpich-dev \
    mpich \
    build-essential \
    cmake \
# OpenMP problem
    libmkl-gnu-thread \
    libomp-${LLVM}-dev \
    libgomp1 \
# Vasp, doesn't work with newer gfortran versions
    gfortran \
    gcc \
    g++ \
    git \
    rsync \
# TODO: add scaLAPACK
#    libmkl-scalapack-lp64 \
#    libmkl-blacs-intelmpi-lp64
# For TRIQS
    libgmp-dev \
    libhdf5-dev \
    clang-${LLVM} \
    libclang-${LLVM}-dev \
    libc++-${LLVM}-dev \
    libc++abi-${LLVM}-dev \
    libboost-dev \
    python-is-python3 \
    python3-pip \
    python3-setuptools \
    python3-dev \
    libfftw3-dev \
    libnfft3-dev \
    less \
    vim \
# Jupyter lab packages
    texlive \
    dvipng \
    texlive-latex-extra \
    texlive-fonts-recommended \
    nodejs \
    npm \
    && \
    apt-get autoremove --purge -y && \
    apt-get autoclean -y && \
    rm -rf /var/cache/apt/* /var/lib/apt/lists/*

# For old sarus version, needs to remove ligfortran5. ligfortran5 needed for previous
# MKL installation but two different libgfortran versions (libgfortran4 comes from gfortran7
# for Vasp) are not supported by sarus < 1.3.2 on daint
# RUN rm /usr/lib/x86_64-linux-gnu/libgfortran.so.5* && rm /etc/ld.so.cache

RUN ldconfig -v

##################################################
# Python modules                                 #
##################################################

# Install python packages
RUN pip3 install --no-cache-dir \
    cython \
    numpy \
    scipy \
    matplotlib \
    decorator \
    jupyter \
    ipywidgets \
    pytest \
    pylint \
    pandas \
    shapely \
    monty \
    mpi4py \
    pymatgen \
    Jinja2 \
    Mako \
    tornado \
    zmq \
    notebook \
    tk \
    scikit-image \
    # Jupyter lab packages
    jupyterlab \
    descartes \
    ipympl \
    RISE

# jupyter lab extension
# TODO: fix, right now it crashes with "nodejs required"
#RUN jupyter-labextension install @jupyter-widgets/jupyterlab-manager jupyter-matplotlib @jupyterlab/toc
#RUN jupyter-lab build

##################################################
# TRIQS and its packages                         #
##################################################

# set some compiler flags
ENV PYTHON_VERSION=3.10 CC=mpicc.mpich MPICH_CC=clang-${LLVM} CXX=mpicxx.mpich MPICH_CXX=clang++-${LLVM}
ENV CXXFLAGS="-stdlib=libc++"

ENV OMP_NUM_THREADS=1
ENV MKL_NUM_THREADS=1
ENV MKL_INTERFACE_LAYER=GNU,LP64
ENV MKL_THREADING_LAYER=SEQUENTIAL
ARG NCORES=10

ENV CPATH=/triqs/include:/usr/include/mkl:${CPATH}
ENV PATH=/triqs/bin:${PATH}
ENV LIBRARY_PATH=/triqs/lib:${LIBRARY_PATH}
ENV LD_LIBRARY_PATH=/triqs/lib:${LD_LIBRARY_PATH}
ENV PYTHONPATH=/triqs/lib/python3.10/site-packages:${PYTHONPATH}
ENV CMAKE_PREFIX_PATH=/triqs/share/cmake:${CMAKE_PREFIX_PATH}
ENV CMAKE_BUILD_PARALLEL_LEVEL=${NCORES}
ENV CTEST_OUTPUT_ON_FAILURE=1
ENV CTEST_PARALLEL_LEVEL=${NCORES}
ENV TRIQS_ROOT=/triqs

##################################################
# Wannier90 and VASP                             #
##################################################

# W90
# Uncomment the lines in this and the following VASP block to have W90 as a library in VASP, allowing for the tag LWANNIER90=.TRUE.
RUN cd / && git clone -b v3.1.0 --depth 1 https://github.com/wannier-developers/wannier90.git
# Make gfort use the intel libraries
COPY wannier90.make.inc /wannier90/make.inc
RUN cd /wannier90 && make default lib && rm -r test-suite
ENV PATH=/wannier90:${PATH}

## TODO: include scalapack
## Adds modified VASP for CSC calculations
#ADD vasp.6.3.0.tgz /
#RUN mv /vasp.6.3.0 /vasp
#COPY mpich_vasp.makefile /vasp/makefile.include
#COPY vasp_diffs /vasp/vasp_diffs
#RUN cd /vasp/src \
#    && for name in electron.F fileio.F locproj.F mlwf.F .objects; \
#       do patch $name -p1 -i ../vasp_diffs/$name; done
#
## Install vasp
## TODO: add ncl
#RUN cd /vasp/ \
#    && make std \
#    && rm -rf src/ build/ arch/ vasp_diffs/ testsuite/
#
#ENV PATH=/vasp/bin:${PATH}

FROM base AS pkgs

# triqs
RUN cd / && mkdir -p triqs && mkdir -p source

RUN cd /source && git clone -b unstable --depth 1 https://github.com/TRIQS/triqs triqs.src \
    && mkdir -p triqs.build && cd triqs.build \
    && cmake ../triqs.src -DCMAKE_INSTALL_PREFIX=/triqs -DBLA_VENDOR=Intel10_64_dyn \
    && make -j$NCORES && ctest -j$NCORES && make install

# dft_tools
RUN cd /source && git clone -b unstable --depth 1 https://github.com/TRIQS/dft_tools.git dft_tools.src \
    && mkdir -p dft_tools.build && cd dft_tools.build \
    && cmake ../dft_tools.src -DCMAKE_INSTALL_PREFIX=/triqs \
    && make -j$NCORES && ctest -j$NCORES test && make install

# cthyb
RUN cd /source && git clone -b unstable --depth 1 https://github.com/TRIQS/cthyb.git cthyb.src \
    && mkdir -p cthyb.build && cd cthyb.build \
    && cmake ../cthyb.src -DCMAKE_INSTALL_PREFIX=/triqs \
    && make -j$NCORES && make -j$NCORES test && make install

# maxent
RUN cd /source && git clone -b unstable --depth 1 https://github.com/TRIQS/maxent.git maxent.src \
    && mkdir -p maxent.build && cd maxent.build \
    && cmake ../maxent.src -DCMAKE_INSTALL_PREFIX=/triqs \
    && make -j$NCORES && make -j$NCORES test && make install

# ctint
# ADD ctint-3.0.x.tar.gz /source/ctint.src
# RUN cd /source && mkdir -p ctint.build && cd ctint.build \
#     && cmake ../ctint.src -DCMAKE_INSTALL_PREFIX=/triqs \
#     && make -j$NCORES && make -j$NCORES test && make install

# hubbardI
RUN cd /source && git clone -b unstable --depth 1 https://github.com/TRIQS/hubbardI hubbardI.src \
    && mkdir -p hubbardI.build && cd hubbardI.build \
    && cmake ../hubbardI.src -DCMAKE_INSTALL_PREFIX=/triqs \
    && make -j$NCORES && make -j$NCORES test && make install

# hartree_fock
RUN cd /source && git clone -b unstable --depth 1 https://github.com/TRIQS/hartree_fock.git hartree_fock.src \
    && mkdir -p hartree_fock.build && cd hartree_fock.build \
    && cmake ../hartree_fock.src -DCMAKE_INSTALL_PREFIX=/triqs \
    && make -j$NCORES && ctest -j$NCORES && make install

# solid_dmft
RUN cd /source && git clone -b unstable --depth 1 https://github.com/flatironinstitute/solid_dmft.git solid_dmft.src \
    && mkdir -p solid_dmft.build && cd solid_dmft.build \
    && cmake ../solid_dmft.src -DCMAKE_INSTALL_PREFIX=/triqs \
    && make -j$NCORES && make -j$NCORES test && make install


##################################################
# Cleanup                                        #
##################################################

# remove source
RUN cd / && rm -rf source

# make sure openmp does not start
ENV OMP_NUM_THREADS=1
# allow safe forking to start DFT in CSC calculations
ENV RDMAV_FORK_SAFE=1

# expose port for jupyter
EXPOSE 8378

COPY entrypoint.sh /usr/local/bin/entrypoint.sh
COPY jupyter_start.sh /usr/local/bin/jupyter.sh

RUN ["chmod", "+x", "/usr/local/bin/entrypoint.sh"]
RUN ["chmod", "+x", "/usr/local/bin/jupyter.sh"]

# change user and group id to match host machine if options are passed accordingly
ENTRYPOINT ["/usr/local/bin/entrypoint.sh"]

