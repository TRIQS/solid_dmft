FROM ubuntu:22.04 AS base

RUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y \
      build-essential \
      ca-certificates \
      cmake \
      curl \
      cython3 \
      debhelper \
      dh-python \
      g++-12 \
      gfortran-12 \
      git \
      hdf5-tools \
      libboost-dev \
      libfftw3-dev \
      libgfortran5 \
      libgmp-dev \
      libhdf5-dev \
      liblapack-dev \
      libnfft3-dev \
      libomp-dev \
      libopenmpi-dev \
      libpython3-dev \
      openmpi-bin \
      openmpi-common \
      openmpi-doc \
      openssl \
      pandoc \
      python-is-python3 \
      python3-ase \
      python3-decorator \
      python3-dev \
      python3-jinja2 \
      python3-mako \
      python3-matplotlib \
      python3-monty \
      python3-mpi4py \
      python3-myst-parser \
      python3-nbsphinx \
      python3-notebook \
      python3-numpy \
      python3-pip \
      python3-pytest \
      python3-scipy \
      python3-shapely \
      python3-skimage \
      python3-sphinx \
      python3-sphinx-rtd-theme \
      rsync \
      sudo \
      && \
      apt-get autoremove --purge -y && \
      apt-get autoclean -y && \
      rm -rf /var/cache/apt/* /var/lib/apt/lists/*

# linkify-it-py (required by sphinx doc build) is not available in Ubuntu 22.04 as package
# the following manually installs it and its only dependency uc-micro-py
RUN mkdir -p /src && cd /src \
 && curl -LOOO http://archive.ubuntu.com/ubuntu/pool/universe/u/uc-micro-py/uc-micro-py_1.0.1{-3.dsc,.orig.tar.xz,-3.debian.tar.xz} \
 && dpkg-source -x uc-micro-py_1.0.1-3.dsc \
 && cd uc-micro-py-1.0.1 \
 && DEB_BUILD_OPTIONS=nocheck dpkg-buildpackage -b -d -uc -us \
 && cd - \
 && apt-get install ./python3-uc-micro_1.0.1-3_all.deb \
 && curl -LOOO http://archive.ubuntu.com/ubuntu/pool/universe/l/linkify-it-py/linkify-it-py_2.0.0{-1.dsc,.orig.tar.gz,-1.debian.tar.xz} \
 && dpkg-source -x linkify-it-py_2.0.0-1.dsc \
 && cd linkify-it-py-2.0.0/ \
 && DEB_BUILD_OPTIONS=nocheck dpkg-buildpackage -b -d -uc -us \
 && cd - \
 && apt-get install ./python3-linkify-it_2.0.0-1_all.deb \
 && cd / && rm -rf /src

# the above is cached by the github action workflow
FROM base AS pkgs

ENV OMP_NUM_THREADS=1
ENV MKL_NUM_THREADS=1
ARG NCORES=8

# create source dirs
RUN cd / && mkdir -p triqs && mkdir -p source

# triqs
ENV CPATH=/triqs/include:${CPATH} \
    PATH=/triqs/bin:${PATH} \
    LIBRARY_PATH=/triqs/lib:${LIBRARY_PATH} \
    LD_LIBRARY_PATH=/triqs/lib:${LD_LIBRARY_PATH} \
    PYTHONPATH=/triqs/lib/python3.10/site-packages:${PYTHONPATH} \
    CMAKE_PREFIX_PATH=/triqs/share/cmake:${CMAKE_PREFIX_PATH} \
    CMAKE_BUILD_PARALLEL_LEVEL=${NCORES} \
    CTEST_OUTPUT_ON_FAILURE=1 \
    CTEST_PARALLEL_LEVEL=${NCORES} \
    TRIQS_ROOT=/triqs

RUN cd /source && git clone -b 3.1.x --depth 1 https://github.com/TRIQS/triqs triqs.src \
    && mkdir -p triqs.build && cd triqs.build \
    && cmake ../triqs.src -DCMAKE_INSTALL_PREFIX=/triqs -DMPIEXEC_PREFLAGS='--allow-run-as-root' \
    && make -j$NCORES && ctest -j$NCORES && make install

# dft_tools
RUN cd /source && git clone -b 3.1.x --depth 1 https://github.com/TRIQS/dft_tools.git dft_tools.src \
    && mkdir -p dft_tools.build && cd dft_tools.build \
    && cmake ../dft_tools.src -DMPIEXEC_PREFLAGS='--allow-run-as-root' \
    && make -j$NCORES && make test && make install

# cthyb
RUN cd /source && git clone -b 3.1.x --depth 1 https://github.com/TRIQS/cthyb.git cthyb.src \
    && mkdir -p cthyb.build && cd cthyb.build \
    && cmake ../cthyb.src -DMPIEXEC_PREFLAGS='--allow-run-as-root'  \
    && make -j$NCORES && ctest -j$NCORES && make install

# hubbardI
RUN cd /source && git clone -b 3.1.x --depth 1 https://github.com/TRIQS/hubbardI.git hubbardI.src \
    && mkdir -p hubbardI.build && cd hubbardI.build \
    && cmake ../hubbardI.src \
    && make -j$NCORES && ctest -j$NCORES && make install

# maxent needed for doc build
RUN cd /source && git clone -b 1.2.x --depth 1 https://github.com/TRIQS/maxent.git maxent.src \
    && mkdir -p maxent.build && cd maxent.build \
    && cmake ../maxent.src \
    && make -j$NCORES && ctest -j$NCORES && make install

# remove source
RUN cd / && rm -rf source

