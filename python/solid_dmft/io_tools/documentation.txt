[  general  ]
-------------

afm_order : bool, default = False
        copy self energies instead of solving explicitly for afm order
beta : float, default = None
        inverse temperature. If set, solid_dmft stores all Greens functions etc on an imaginary-frequency grid
        and also n_iw and n_tau have to be specified.
        If not set, it uses a real-frequency grid and eta, n_w and w_range have to be set
block_threshold : float, default = 1e-5
        threshold for finding block structures in the input data (off-diag yes or no)
broy_max_it : int, default = -1
        maximum number of iteration to be considered for broyden mixing.
        Only used if general.g0_mix_type='broyden'.
        1 corresponds to simple linear mixing
calc_energies : bool, default = False
        Calculate the energies explicitly within the dmft loop and write them to the observables file.
        Not compatible with 'ftps' solver
calc_mu_method : string, default = 'dichotomy'
        optimization method used for finding the chemical potential:

        * 'dichotomy': usual method from TRIQS, should always converge but may be slow
        * 'newton': scipy Newton root finder, much faster but might be unstable
        * 'brent': scipy hyperbolic Brent root finder preconditioned with dichotomy to find edge, a compromise between speed and stability
csc : bool, default = False
        are we doing a CSC calculation?
dc : bool, default = True
        is the double-counting correction on?
dc_dmft : bool, default = None
        Calculate the double-counting (DC) correction from DMFT or DFT occupations.
        Needs to be set if general.dc = True.

        * True: DC with DMFT occupation in each iteration
        * False: DC with DFT occupations after each DFT cycle
dc_type : int or list of int, default = None
        Type of double counting correction considered.
        Can be a list per impurity to have different types for different impurities.
        Needs to be set if general.dc = True.

        * 0: FLL
        * 1: Held formula, needs to be used with slater-kanamori h_int_type=2
        * 2: AMF
        * 3: FLL for eg orbitals only with U,J for Kanamori
enforce_off_diag : bool or list of bool, default = True
        only if False, the block structure can be reduced to ignore off-diagonal elements
        if they are below the general.block_threshold of the block structure finder
eta : float, default = None
        broadening of Green's function. Used when Green's functions are stored on real-frequency grid,
        i.e., general.beta is None, and for the real-frequency solvers
fixed_mu_value : float, default = None
        If given, the chemical potential remains fixed in calculations
g0_conv_crit : float, default = -1.0
        stop the calculation if sum_w 1/(w^0.6) ||G0-G0_prev|| is smaller than threshold
g0_mix : float, default = 1.0
        Mixing the weiss field G0 with previous iteration G0 for better convergency. 1.0 means no mixing.
        Setting g0_mix to 0.0 with linear mixing can be used for statistic sampling when
        restarting a calculation
g0_mix_type : string, default = 'linear'
        which type of mixing is used. Possible values are:
        linear: linear mixing
        broyden: broyden mixing
gimp_conv_crit : float, default = -1.0
        stop the calculation if  sum_w 1/(w^0.6) ||Gimp-Gloc|| is smaller than threshold
h_field : float, default = 0.0
        magnetic field
h_field_it : int, default = 0
        number of iterations the magnetic field is kept on
h_int_basis : string, default = 'triqs'
        cubic basis convention to compute the interaction U matrix
        * 'triqs'
        * 'vasp' (equivalent to 'triqs')
        * 'wien2k'
        * 'wannier90'
        * 'qe' (equivalent to 'wannier90')
h_int_type : string, mandatory
        interaction type:

        * density_density: used for full d-shell or eg- or t2g-subset
        * kanamori: only physical for the t2g or the eg subset
        * full_slater: used for full d-shell or eg- or t2g-subset
        * ntot: U/2 (Ntot^2 - Ntot) interaction
        * simple_intra: density-density like but only intra orbital with given U value (no rotations applied)
        * crpa: use the cRPA matrix as interaction Hamiltonian
        * crpa_density_density: use the density-density terms of the cRPA matrix
        * dynamic: use dynamic U from h5 archive

        Needs to be stored as Matsubara Gf under dynamic_U/U_iw in the input h5
h5_save_freq : int, default = 5
        how often is the output saved to the h5 archive
J :  float or list of float, mandatory
        J values for impurities if only one value is given, the same J is assumed for all impurities
jobname : str, default = 'dmft_dir'
        the output directory for one-shot calculations
load_sigma : bool, default = False
        load a old sigma from h5 file
load_sigma_iter : int, default = -1
        load the sigma from a specific iteration if wanted.
        If it is -1, loads from the last iteration.
magmom : list of float, default = None
        Initialize magnetic moments if magnetic is on. length must be #imps.
        List composed of energetic shifts written in electronvolts.
        This will initialize the spin blocks of the sigma with a diagonal shift
        With -shift for the up block, and +shift for the down block
        (positive shift favours the up spin component, not compatible with spin-orbit coupling)
magnetic : bool, default = False
        are we doing a magnetic calculations? If yes put magnetic to True.
        Not implemented for CSC calculations
mu_gap_gb2_threshold : float, default = None
        Threshold of the absolute of the lattice GF at tau=beta/2 for use
        of MaxEnt's lattice spectral function to put the chemical potential
        into the middle of the gap. Does not work if system completely full
        or empty, mu mixing is not applied to it. Recommended value 0.01.
mu_gap_occ_deviation : float, default = none
        Only used if mu_gap_gb2_threshold != none. Sets additional criterion
        for finding the middle of the gap through occupation deviation to
        avoid getting stuck in an insulating state with wrong occupation.
mu_initial_guess : float, default = None
        The chemical potential of the DFT calculation.
        If not given, mu will be calculated from the DFT bands
mu_mix_const : float, default = 1.0
        Constant term of the mixing of the chemical potential. See mu_mix_per_occupation_offset.
mu_mix_per_occupation_offset : float, default = 0.0
        Mu mixing proportional to the occupation offset.
        Mixing between the dichotomy result and the previous mui,

        mu_next = factor * mu_dichotomy + (1-factor) * mu_previous, with
        factor = mu_mix_per_occupation_offset * abs(n - n\_target) + mu_mix_const.

        The program ensures that 0 <= factor <= 1.
        mu_mix_const = 1.0 and mu_mix_per_occupation_offset = 0.0 means no mixing.
mu_update_freq : int, default = 1
        The chemical potential will be updated every # iteration
n_iter_dmft : int, mandatory
        number of iterations per dmft cycle after first cycle
n_iter_dmft_first : int, default = 10
        number of iterations in first dmft cycle to converge dmft solution
n_iter_dmft_per : int, default = 2
        number of iterations per dmft step in CSC calculations
n_iw : int, default = 1025
        number of Matsubara frequencies
n_tau : int, default = 10001
        number of imaginary time points
n_w : int, default = 5001
        number of real frequency points
noise_level_initial_sigma : float, default = 0.0
        spread of Gaussian noise applied to the initial Sigma
occ_conv_crit : float, default = -1.0
        stop the calculation if a certain threshold for the imp occ change is reached
path_to_sigma : str, default = None
        path to h5 file from which the sigma should be loaded.
        Needed if load_sigma is true
plo_cfg : str, default = 'plo.cfg'
        config file for PLOs for the converter
prec_mu : float, default = 1e-4
        general precision for determining the chemical potential at any time calc_mu is called
ratio_F4_F2 : float or list of float, default = None
        Ratio between the Slater integrals  F_4 and F_2. Only used for the
        interaction Hamiltonians 'density_density' and 'full_slater' and
        only for d-shell impurities, where the default is 0.63.
sampling_h5_save_freq : int, default = 5
        overwrites h5_save_freq when sampling has started
sampling_iterations : int, default = 0
        for how many iterations should the solution sampled after the CSC loop is converged
seedname : str, mandatory
        seedname for h5 archive with DMFT input and output
set_rot : string, default = None
        use density_mat_dft to diagonalize occupations = 'den'
        use hloc_dft to diagonalize occupations = 'hloc'
sigma_conv_crit : float, default = -1.0
        stop the calculation if sum_w 1/(w^0.6) ||Sigma-Sigma_prev|| is smaller than threshold
sigma_mix : float, default = 1.0
        careful: Sigma mixing can break orbital symmetries, use G0 mixing
        mixing sigma with previous iteration sigma for better convergency. 1.0 means no mixing
store_solver : bool, default = False
        store the whole solver object under DMFT_input in h5 archive
U : float or list of float, mandatory
        U values for impurities if only one value is given, the same U is assumed for all impurities
U_prime : float or list of floats, default = None
        U prime values for impurities if only one value is given, the same U prime is assumed for all impurities
        only used if h_int_type is kanamori
w_range : list of int, default = [-10, 10]
        Contains w_min and w_max

[  solver  ]
------------
type : str, mandatory
        type of solver chosen for the calculation, currently supports:

        * 'cthyb'
        * 'ctint'
        * 'ctseg'
        * 'hubbardI'
        * 'ftps'
        * 'hartree'
idx_impurities : list of int, default = None
        list of impurities this solver is supposed to solve

cthyb
=====
delta_interface : bool, default = False
        use delta interface in cthyb instead of input G0
fit_max_moment : int, default = None
        max moment to be fitted. Only used if solver.perform_tail_fit = True
fit_max_n : int, default = None
        number of highest matsubara frequency to fit. Only used if solver.perform_tail_fit = True
fit_max_w : float, default = None
        highest matsubara frequency to fit. Only used if solver.perform_tail_fit = True
fit_min_n : int, default = None
        number of start matsubara frequency to start with. Only used if solver.perform_tail_fit = True
fit_min_w : float, default = None
        start matsubara frequency to start with. Only used if solver.perform_tail_fit = True
imag_threshold : float, default = 1e-14
        threshold for imag part of G0_tau. be warned if symmetries are off in projection scheme imag parts can occur in G0_tau
legendre_fit : bool, default = False
        filter noise of G(tau) with G_l, cutoff is taken from n_l
length_cycle : int, mandatory
        length of each cycle; number of sweeps before measurement is taken
loc_n_max : int, default = None
        Restrict local Hilbert space to states with at most this number of particles
loc_n_min : int, default = None
        Restrict local Hilbert space to states with at least this number of particles
max_time : int, default = -1
        maximum amount the solver is allowed to spend in each iteration
measure_chi_insertions : int, default = 100
        number of insertation for measurement of chi
measure_chi : str, default = None
        TODO: update
        measure the dynamic spin suszeptibility chi(sz,sz(tau))
        triqs.github.io/cthyb/unstable/guide/dynamic_susceptibility_notebook.html
measure_density_matrix : bool, default = False
        measures the impurity density matrix and sets also
        use_norm_as_weight to true
measure_G_l : bool, default = False
        measure Legendre Greens function
measure_pert_order : bool, default = False
        measure perturbation order histograms: triqs.github.io/cthyb/latest/guide/perturbation_order_notebook.html.
        The result is stored in the h5 archive under 'DMFT_results' at every iteration
        in the subgroups 'pert_order_imp_X' and 'pert_order_total_imp_X'
move_double : bool, default = True
        double moves in solver
move_shift : bool, default = False
        shift moves in solver
n_cycles_tot : int, mandatory
        total number of sweeps
n_l : int, default = None
        number of Legendre coefficients.
        Needed if measure_G_l=True or legendre_fit=True
n_warmup_cycles : int, mandatory
        number of warmup cycles before real measurement sets in
off_diag_threshold : float, default = 0.0
        threshold for off-diag elements in Hloc0
perform_tail_fit : bool, default = False
        tail fitting if legendre is off?
random_seed : str, default = None
        if None, uses default seed by triqs.
        If specified the int will be used for random seeds. Careful, this will give the same random
        numbers on all mpi ranks.
        You can also pass a string that will convert the keywords it or rank on runtime, e.g.,
        34788 * it + 928374 * rank will convert each iteration the variables it and rank for the random
        seed

ctint
=====
length_cycle : int, mandatory
        length of each cycle; number of sweeps before measurement is taken
max_time : int, default = -1
        maximum amount the solver is allowed to spend in each iteration
measure_pert_order : bool, default = False
        measure perturbation order histograms: triqs.github.io/cthyb/latest/guide/perturbation_order_notebook.html.
        The result is stored in the h5 archive under 'DMFT_results' at every iteration
        in the subgroups 'pert_order_imp_X' and 'pert_order_total_imp_X'
move_double : bool, default = True
        double moves in solver
n_cycles_tot : int, mandatory
        total number of sweeps
n_warmup_cycles : int, mandatory
        number of warmup cycles before real measurement sets in
random_seed : str, default = None
        if None, uses default seed by triqs.
        If specified the int will be used for random seeds. Careful, this will give the same random
        numbers on all mpi ranks.
        You can also pass a string that will convert the keywords it or rank on runtime, e.g.,
        34788 * it + 928374 * rank will convert each iteration the variables it and rank for the random
        seed

ctseg
=====
improved_estimator : bool, default = False
        measure improved estimators
        Sigma_iw will automatically be calculated via
        http://dx.doi.org/10.1103/PhysRevB.85.205106
legendre_fit : bool, default = False
        filter noise of G(tau) with G_l, cutoff is taken from n_l
length_cycle : int, mandatory
        length of each cycle; number of sweeps before measurement is taken
max_time : int, default = -1
        maximum amount the solver is allowed to spend in each iteration
measure_G_iw : bool, default = False
        should the solver measure G(iw)?
measure_G_l : bool, default = False
        measure Legendre Greens function
measure_G_tau : bool, default = True
        should the solver measure G(tau)?
measure_pert_order : bool, default = False
        measure perturbation order histograms: triqs.github.io/cthyb/latest/guide/perturbation_order_notebook.html.
        The result is stored in the h5 archive under 'DMFT_results' at every iteration
        in the subgroups 'pert_order_imp_X' and 'pert_order_total_imp_X'
n_cycles_tot : int, mandatory
        total number of sweeps
n_l : int, default = None
        number of Legendre coefficients.
        Needed if measure_G_l=True or legendre_fit=True
n_warmup_cycles : int, mandatory
        number of warmup cycles before real measurement sets in
random_seed : str, default = None
        if None, uses default seed by triqs.
        If specified the int will be used for random seeds. Careful, this will give the same random
        numbers on all mpi ranks.
        You can also pass a string that will convert the keywords it or rank on runtime, e.g.,
        34788 * it + 928374 * rank will convert each iteration the variables it and rank for the random
        seed

hubbardI
========
legendre_fit : bool, default = False
        filter noise of G(tau) with G_l, cutoff is taken from n_l
measure_density_matrix : bool, default = False
        measures the impurity density matrix and sets also
        use_norm_as_weight to true
measure_G_l : bool, default = False
        measure Legendre Greens function
measure_G_tau : bool, default = True
        should the solver measure G(tau)?
n_l : int, default = None
        number of Legendre coefficients.
        needed if measure_G_l=True or legendre_fit=True

ftps parameters
===============
bath_fit : bool, mandatory
        DiscretizeBath vs BathFitter
calc_me :  bool, default = True
        calculate only symmetry-inequivalent spins/orbitals, symmetrized afterwards
diag_delta : bool, default = False
        option to remove off-diagonal terms in the hybridization function
        available for ftps
dmrg_maxm : int, default = 100
        TODO: add description
dmrg_maxmB : int, default = 100
        maximal bath-bath bond dimensions
dmrg_maxmI : int, default = 100
        maximal imp-imp bond dimensions
dmrg_maxmIB : int, default = 100
        maximal imp-bath bond dimensions
dmrg_tw : float, default 1e-9
        truncated weight for every link
dt : float, mandatory
        time step
enforce_gap : list of float, default = None
        enforce gap in DiscretizeBath between interval
ignore_weight : float, default = 0.0
        ignore weight of peaks for bath fitter
maxm : int, default = 100
        TODO: write description
maxmB : int, default = 100
        maximal bath-bath bond dimensions
maxmI : int, default = 100
        maximal imp-imp bond dimensions
maxmIB : int, default = 100
        maximal imp-bath bond dimensions
n_bath : int, default = 0
        number of bath sites
path_to_gs : string, default = None
        location of GS if already present. Use 'postprocess' to skip solver and go directly to post-processing
        of previously terminated time-evolved state
ph_symm : bool, default = False
        particle-hole symmetric problem
refine_factor : int, default = 1
        rerun ftps cycle with increased accuracy
state_storage : string, default = './'
        location of large MPS states
sweeps :  int, default = 10
        Number of DMRG sweeps
tw : float, default 1e-9
        truncated weight for every link

hartree
================
force_real : bool, default = True
        force the self energy from Hartree fock to be real
method : str, default = "krylov"
        method for root finder. Only used if one_shot=False, see scipy.optimize.root for options.
one_shot : bool, default = False
        Perform a one-shot or self-consitent root finding in each DMFT step of the Hartree solver.
tol : float, default = 1e-5
        tolerance for root finder if one_shot=False.
with_fock : bool, default = False
        include Fock exchange terms in the self-energy

[  dft  ]
---------
dft_code : string
        choose the DFT code interface, for now Quantum Espresso and Vasp are available.
        Possible values:

        * 'vasp'
        * 'qe'
dft_exec : string, default = 'vasp_std'
        command for the DFT executable
mpi_env : string, default = 'default'
        selection for mpi env for DFT / VASP in default this will only call VASP as mpirun -np n_cores_dft dft_exec
n_cores : int, None
        number of cores for the DFT code (VASP)
n_iter : int, default = 4
        only needed for VASP. Number of DFT iterations to feed the DMFT
        charge density into DFT, which generally takes multiple Davidson steps.
        For every DFT iterations, the charge-density correction is recalculated
        using newly generated projectors and hoppings from the previous DFT run
n_iter_first : int, default = dft.n_iter
        number of DFT iterations in the first charge correction because this
        first charge correction usually changes the DFT wave functions the most.
projector_type : string, default = 'w90'
        plo: uses VASP's PLO formalism, requires LOCPROJ in the INCAR
        w90: uses Wannier90 (for VASP and QuantumEspresso)
store_eigenvals : bool, default = False
        stores the dft eigenvals from LOCPROJ (projector_type=plo) or
        wannier90.eig (projector_type=w90) file in h5 archive
w90_exec : string, default ='wannier90.x'
        the command to start a single-core wannier run
w90_tolerance : float, default = 1e-6
        threshold for mapping of shells and checks of the Hamiltonian

[  advanced  ]
--------------
dc_factor : float, default = None
        If given, scales the dc energy by multiplying with this factor, usually < 1.
        If None, the dc is left unchanged, which is equivalent to dc_factor=1.
dc_fixed_occ : list of float, default = None
        If given, the occupation for the DC for each impurity is set to the provided value.
        Still uses the same kind of DC!
dc_fixed_value : float, default = None
        If given, it sets the DC (energy/imp) to this fixed value. Overwrites EVERY other DC configuration parameter if DC is turned on
dc_nominal : bool, default = False
        TODO: write
dc_orb_shift : list of float, default = None
        extra potential shift per orbital per impurity added to the DC
dc_J :  float or list of float, default = general.J
        J values for DC determination if only one value is given, the same J is assumed for all impurities
dc_U :  float or list of float, default = general.U
        U values for DC determination if only one value is given, the same U is assumed for all impurities
map_solver_struct : list of dict, default = None
        Additional manual mapping of the solver block structure, applied
        after the block structure finder for each impurity.
        Give exactly one dict per ineq impurity.
        see also triqs.github.io/dft_tools/latest/_python_api/triqs_dft_tools.block_structure.BlockStructure.map_gf_struct_solver.html
mapped_solver_struct_degeneracies : list, default = none
        Degeneracies applied when using map_solver_struct, for each impurity.
        If not given and map_solver_struct is used, no symmetrization will happen.
pick_solver_struct : list of dict, default = None
        input a solver dictionary for each ineq impurity to reduce dimensionality of
        solver block structure. Similar to to map_solver_struct, but with simpler syntax.
        Not listed blocks / orbitals will be not treated in impurity solver.
        Keeps degenerate shells.
